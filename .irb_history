Book.first
Book.first.update(title: 'The Martian', author: 'Andy Weir')
Book.first
Book.second
Book.first.update(title: 'Ready Player One', author: 'Ernest Cline')
Book.count
Book.third
Book.first.update(title: 'The Martian', author: 'Andy Weir')
Book.second.update(title: 'Ready Player One', author: 'Ernest Cline')
Book.third
Book.third.update(title: "Practical Object-Oriented Design in Ruby", author: "Sandi Metz")
Book.fourth
Book.fourth.update(title: 'Sapiens: A Brief History of Humankind', author: "Yuval Noah Harari")
Book.fifth
Book.fifth.update(title: "An Introduction to Zen Buddhism", author: "Daisetsu Teitaro Suzuki")
Book.sixth
Book.seventh
Book.all
Book.find("628c61d3-64ad-49ed-98e7-d5431e2b6991")
Book.find("628c61d3-64ad-49ed-98e7-d5431e2b6991").update(title: "Zen Mind, Beginner's Mind", author: "Shunryu Suzuki")
Book.where(author: nil)
Book.where(author: nil).last.update(title: "Leaders Eat Last", author: "Simon Sinek")
Book.where(author: nil).last
Book.where(author: nil).last.update(title: "A Farewell to Arms", author: "Ernest Hemingway")
Book.where(author: nil).last
Book.where(author: nil).last.update(title: "Talking to Strangers", author: "Malcolm Gladwell")
Book.where(author: nil).last
Book.where(author: nil).last.update(title: "Creativity, Inc.", author: "Ed Catmull")
Book.where(author: nil).last
Book.where(author: nil).count
Book.where(author: nil).last
Book.where(author: nil).last.update(author: "Frank Herbert", title: "Dune Messiah")
Book.where(author: nil).last
Book.where(author: nil).last.destroy!
Book.where(author: nil).last
Book.where(author: nil).last.update(title: "The War of Art", author: "Steven Pressfield")
Book.where(author: nil).last
Book.where(author: nil).last.highlights
Book.where(author: nil).last.destroy!
Book.where(author: nil).last
Book.where(author: nil).last.highlights
Book.where(author: nil).last.destroy!
Book.where(author: nil).last
Book.where(author: nil).last.highlights
Book.where(author: nil).last.update(title: "An Astronaut's Guide to Life on Earth", author: "Chris Hadfield")
Book.where(author: nil).last
Book.where(author: nil).last.update(title: "Walden", author: "Henry David Thoreau")
Book.where(author: nil).last
Book.where(author: nil).last.update(title: "The Alchemist", author: "Paulo Coelho")
Book.where(author: nil).last
Book.where(author: nil).count
Book.where(author: nil).last.update(title: "The Headspace Guide to Meditation and Mindfulness", author: "Andy Puddicombe")
Book.all
Highlights.all
Highlight.all
Highlight.all.last
Highlight.all.last.book
exit
Highlight.all
Highlight.all
Highlight.count
Highlight.destroy_all
Highlight.count
Highlight.all
Book.count
Book.last
Book.all
Book.find("e4d96b3b-a1c2-4be2-99cc-d050886082f6")
Book.find("e4d96b3b-a1c2-4be2-99cc-d050886082f6").highlights
Book.find("e4d96b3b-a1c2-4be2-99cc-d050886082f6").highlights.destroy_all
Book.find("e4d96b3b-a1c2-4be2-99cc-d050886082f6")
Book.find("e4d96b3b-a1c2-4be2-99cc-d050886082f6").destroy!
Book.all
Book.find("ae99bbbb-0809-42a4-a32a-f092d94f7498")
Book.find("ae99bbbb-0809-42a4-a32a-f092d94f7498").highlights
Book.find("2c33e00e-6992-497e-9217-7363e1776f5a")
Book.find("2c33e00e-6992-497e-9217-7363e1776f5a").highlights
Book.find("2c33e00e-6992-497e-9217-7363e1776f5a").highlights.destroy_all
Book.find("2c33e00e-6992-497e-9217-7363e1776f5a").destroy!
Book.find("2c33e00e-6992-497e-9217-7363e1776f5a")
Highlight.where(book_id: nil)
Highlight.where(book_id: nil).destroy_all
Book.first
client = Exponent::Push::Client.new
reload!
client = Exponent::Push::Client.new
require 'exponent-server-sdk'
client = Exponent::Push::Client.new
[].first
reload!
api_key = 'AIzaSyBFYOUeRc8vDurc62WHMjGRHFJkPl4hkQA'
Google::Apis::Vision.new
require 'google-api-client'
exit
require 'google-api-client'
Google::Apis::Vision.new
GoogleClient.new
GoogleClient.new
reload!
GoogleClient.new
reload!
GoogleClient.new
GoogleClient.new(bytes: "hi")
Clients::Google.new
exit
Clients::Google.new
exit
Clients::Google.new
Clients::Google.new(bytes: "hi")
Clients::Google.new(bytes: "hi")
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
reload!
Clients::Google.new(bytes: "hi")
_.process
_.process
Clients::Google.new(bytes: "hi")
_.process
Clients::Google.new(bytes: "hi")
_.process
reload!
Highlights::OCR.new(bytes: "hi").call
Highlights::Ocr.new(bytes: "hi").call
reload!
Highlights::Ocr.new(bytes: "hi").call
File.open('joe_headshot.jpg')
reload!
File.open('joe_headshot.jpg')
File.open('app/joe_headshot.jpg')
File.open('app/joe_headshot.jpg').read
Clients::Google.new(bytes: _).process
reload!
File.open('app/joe_headshot.jpg').read
bytes = _
Clients::Google.new(bytes: bytes).process
Clients::Google.new(bytes: bytes).process.responses
Clients::Google.new(bytes: bytes).process
Clients::Google.new(bytes: bytes).process.responses[0].description
Clients::Google.new(bytes: bytes).process.responses[0]
Clients::Google.new(bytes: File.read('test-ocr.png').read).process
Clients::Google.new(bytes: File.read('test-ocr.png')).process
Clients::Google.new(bytes: Base64.decode64(File.read('test-ocr.png'))).process
reload!
Clients::Google.new(bytes: bytes).request
Clients::Google.new(bytes: bytes).request
bytes
Clients::Google.new(bytes: bytes).request
Clients::Google.new(bytes: bytes).request
{\
          requests: [{\
            image: {\
              content: file_bytes\
            },\
            features: [\
              {\
                type: 'TEXT_DETECTION', # Details are below.\
                maxResults: 1 # The number of results you would like to get\
              }\
            ]\
          }]\
}
file_bytes = Base64.strict_encode64(bytes)
{\
          requests: [{\
            image: {\
              content: file_bytes\
            },\
            features: [\
              {\
                type: 'TEXT_DETECTION', # Details are below.\
                maxResults: 1 # The number of results you would like to get\
              }\
            ]\
          }]\
}
_.to_json
body = _
uri = URI.parse("https://vision.googleapis.com/v1/images:annotate?key=AIzaSyBFYOUeRc8vDurc62WHMjGRHFJkPl4hkQA")
https = Net::HTTP.new(uri.host, uri.port)
https.use_ssl = true
request = Net::HTTP::Post.new(uri.request_uri)
request["Content-Type"] = "application/json"
response = https.request(request, body)
response
response.body
response.body.text
JSON.parse(response.body)
JSON.parse(response.body).description
JSON.parse(response.body)['text']
response
response_hash
hash
response_hash
response
r
Highlight.where(book: nil)
Book.create(title: "Zen at Work", author: "Les Kaye")
Highlight.where(book: nil).last.update(book_id: "f657fefa-232b-478c-8e1c-e411fd974988")
Highlight.where(book: nil).last
Highlight.where(book: nil).last.book
Highlight.where(book: nil).last.update!(book_id: "f657fefa-232b-478c-8e1c-e411fd974988")
Highlight.where(book: nil).last.book
Highlight.where(book: nil).last
Highlight.where(book: nil).last.reload
Highlight.where(book: "f657fefa-232b-478c-8e1c-e411fd974988")
Highlight.find("ef2dd827-5499-4616-a4ba-05c9ca0199ef").destroy!
